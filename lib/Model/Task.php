<?php
/**
 * Task
 *
 * PHP version 5
 *
 * @category Class
 * @package  Float\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Reference
 *
 * This API allows 3rd party integration of your Float data.
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Float\Client\Model;

use \ArrayAccess;

/**
 * Task Class Doc Comment
 *
 * @category    Class
 * @package     Float\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Task implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Task';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'taskId' => 'int',
        'projectId' => 'int',
        'startDate' => 'string',
        'endDate' => 'string',
        'startTime' => 'string',
        'hours' => 'float',
        'peopleId' => 'int',
        'priority' => 'int',
        'name' => 'string',
        'notes' => 'string',
        'repeatState' => 'string',
        'repeatEndDate' => 'string',
        'createdBy' => 'string',
        'created' => 'string',
        'modifiedBy' => 'string',
        'modified' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'taskId' => null,
        'projectId' => null,
        'startDate' => null,
        'endDate' => null,
        'startTime' => null,
        'hours' => null,
        'peopleId' => null,
        'priority' => null,
        'name' => null,
        'notes' => null,
        'repeatState' => null,
        'repeatEndDate' => null,
        'createdBy' => null,
        'created' => null,
        'modifiedBy' => null,
        'modified' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'taskId' => 'task_id',
        'projectId' => 'project_id',
        'startDate' => 'start_date',
        'endDate' => 'end_date',
        'startTime' => 'start_time',
        'hours' => 'hours',
        'peopleId' => 'people_id',
        'priority' => 'priority',
        'name' => 'name',
        'notes' => 'notes',
        'repeatState' => 'repeat_state',
        'repeatEndDate' => 'repeat_end_date',
        'createdBy' => 'created_by',
        'created' => 'created',
        'modifiedBy' => 'modified_by',
        'modified' => 'modified'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'taskId' => 'setTaskId',
        'projectId' => 'setProjectId',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'startTime' => 'setStartTime',
        'hours' => 'setHours',
        'peopleId' => 'setPeopleId',
        'priority' => 'setPriority',
        'name' => 'setName',
        'notes' => 'setNotes',
        'repeatState' => 'setRepeatState',
        'repeatEndDate' => 'setRepeatEndDate',
        'createdBy' => 'setCreatedBy',
        'created' => 'setCreated',
        'modifiedBy' => 'setModifiedBy',
        'modified' => 'setModified'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'taskId' => 'getTaskId',
        'projectId' => 'getProjectId',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'startTime' => 'getStartTime',
        'hours' => 'getHours',
        'peopleId' => 'getPeopleId',
        'priority' => 'getPriority',
        'name' => 'getName',
        'notes' => 'getNotes',
        'repeatState' => 'getRepeatState',
        'repeatEndDate' => 'getRepeatEndDate',
        'createdBy' => 'getCreatedBy',
        'created' => 'getCreated',
        'modifiedBy' => 'getModifiedBy',
        'modified' => 'getModified'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['taskId'] = isset($data['taskId']) ? $data['taskId'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['startTime'] = isset($data['startTime']) ? $data['startTime'] : null;
        $this->container['hours'] = isset($data['hours']) ? $data['hours'] : null;
        $this->container['peopleId'] = isset($data['peopleId']) ? $data['peopleId'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['repeatState'] = isset($data['repeatState']) ? $data['repeatState'] : null;
        $this->container['repeatEndDate'] = isset($data['repeatEndDate']) ? $data['repeatEndDate'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modifiedBy'] = isset($data['modifiedBy']) ? $data['modifiedBy'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['projectId'] === null) {
            $invalid_properties[] = "'projectId' can't be null";
        }
        if ($this->container['startDate'] === null) {
            $invalid_properties[] = "'startDate' can't be null";
        }
        if ($this->container['endDate'] === null) {
            $invalid_properties[] = "'endDate' can't be null";
        }
        if ($this->container['hours'] === null) {
            $invalid_properties[] = "'hours' can't be null";
        }
        if ($this->container['peopleId'] === null) {
            $invalid_properties[] = "'peopleId' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['projectId'] === null) {
            return false;
        }
        if ($this->container['startDate'] === null) {
            return false;
        }
        if ($this->container['endDate'] === null) {
            return false;
        }
        if ($this->container['hours'] === null) {
            return false;
        }
        if ($this->container['peopleId'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets taskId
     * @return int
     */
    public function getTaskId()
    {
        return $this->container['taskId'];
    }

    /**
     * Sets taskId
     * @param int $taskId The ID of this task. Read-only: not required when creating a task
     * @return $this
     */
    public function setTaskId($taskId)
    {
        $this->container['taskId'] = $taskId;

        return $this;
    }

    /**
     * Gets projectId
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     * @param int $projectId The ID of the project that this task belongs to
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets startDate
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     * @param string $startDate Start date of this task
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     * @param string $endDate End date of this task
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets startTime
     * @return string
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     * @param string $startTime Start time of this task in 24 hr format
     * @return $this
     */
    public function setStartTime($startTime)
    {
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets hours
     * @return float
     */
    public function getHours()
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     * @param float $hours Number of hours per day to spend on this task
     * @return $this
     */
    public function setHours($hours)
    {
        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets peopleId
     * @return int
     */
    public function getPeopleId()
    {
        return $this->container['peopleId'];
    }

    /**
     * Sets peopleId
     * @param int $peopleId The ID of the person assigned to this task
     * @return $this
     */
    public function setPeopleId($peopleId)
    {
        $this->container['peopleId'] = $peopleId;

        return $this;
    }

    /**
     * Gets priority
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     * @param int $priority Is this task a priority? 1 = Priority, 0 = Not a priority
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of this task
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes Additional notes about the task
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets repeatState
     * @return string
     */
    public function getRepeatState()
    {
        return $this->container['repeatState'];
    }

    /**
     * Sets repeatState
     * @param string $repeatState Frequency that this task repeats. 0 = No repeat, 1 = Weekly, 2 = Monthly, 3 = Every 2 Weeks
     * @return $this
     */
    public function setRepeatState($repeatState)
    {
        $this->container['repeatState'] = $repeatState;

        return $this;
    }

    /**
     * Gets repeatEndDate
     * @return string
     */
    public function getRepeatEndDate()
    {
        return $this->container['repeatEndDate'];
    }

    /**
     * Sets repeatEndDate
     * @param string $repeatEndDate Date that the repeating task will cease
     * @return $this
     */
    public function setRepeatEndDate($repeatEndDate)
    {
        $this->container['repeatEndDate'] = $repeatEndDate;

        return $this;
    }

    /**
     * Gets createdBy
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     * @param string $createdBy Account ID of person who created this task (read-only)
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets created
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param string $created Date this record was created (read-only)
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modifiedBy
     * @return string
     */
    public function getModifiedBy()
    {
        return $this->container['modifiedBy'];
    }

    /**
     * Sets modifiedBy
     * @param string $modifiedBy Account ID of person who last modified this task (read-only)
     * @return $this
     */
    public function setModifiedBy($modifiedBy)
    {
        $this->container['modifiedBy'] = $modifiedBy;

        return $this;
    }

    /**
     * Gets modified
     * @return string
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param string $modified Date this record was last modified (read-only)
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Float\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Float\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


