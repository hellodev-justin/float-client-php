<?php
/**
 * Timeoff
 *
 * PHP version 5
 *
 * @category Class
 * @package  Float\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Reference
 *
 * This API allows 3rd party integration of your Float data.
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Float\Client\Model;

use \ArrayAccess;

/**
 * Timeoff Class Doc Comment
 *
 * @category    Class
 * @package     Float\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Timeoff implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Timeoff';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timeoffId' => 'int',
        'timeoffTypeId' => 'int',
        'startDate' => 'string',
        'endDate' => 'string',
        'hours' => 'float',
        'timeoffNotes' => 'string',
        'modifiedBy' => 'string',
        'createdBy' => 'string',
        'created' => 'string',
        'modified' => 'string',
        'repeatState' => 'string',
        'repeatEnd' => 'string',
        'fullDay' => 'int',
        'peopleIds' => 'null[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'timeoffId' => null,
        'timeoffTypeId' => null,
        'startDate' => null,
        'endDate' => null,
        'hours' => null,
        'timeoffNotes' => null,
        'modifiedBy' => null,
        'createdBy' => null,
        'created' => null,
        'modified' => null,
        'repeatState' => null,
        'repeatEnd' => null,
        'fullDay' => null,
        'peopleIds' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'timeoffId' => 'timeoff_id',
        'timeoffTypeId' => 'timeoff_type_id',
        'startDate' => 'start_date',
        'endDate' => 'end_date',
        'hours' => 'hours',
        'timeoffNotes' => 'timeoff_notes',
        'modifiedBy' => 'modified_by',
        'createdBy' => 'created_by',
        'created' => 'created',
        'modified' => 'modified',
        'repeatState' => 'repeat_state',
        'repeatEnd' => 'repeat_end',
        'fullDay' => 'full_day',
        'peopleIds' => 'people_ids'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'timeoffId' => 'setTimeoffId',
        'timeoffTypeId' => 'setTimeoffTypeId',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'hours' => 'setHours',
        'timeoffNotes' => 'setTimeoffNotes',
        'modifiedBy' => 'setModifiedBy',
        'createdBy' => 'setCreatedBy',
        'created' => 'setCreated',
        'modified' => 'setModified',
        'repeatState' => 'setRepeatState',
        'repeatEnd' => 'setRepeatEnd',
        'fullDay' => 'setFullDay',
        'peopleIds' => 'setPeopleIds'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'timeoffId' => 'getTimeoffId',
        'timeoffTypeId' => 'getTimeoffTypeId',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'hours' => 'getHours',
        'timeoffNotes' => 'getTimeoffNotes',
        'modifiedBy' => 'getModifiedBy',
        'createdBy' => 'getCreatedBy',
        'created' => 'getCreated',
        'modified' => 'getModified',
        'repeatState' => 'getRepeatState',
        'repeatEnd' => 'getRepeatEnd',
        'fullDay' => 'getFullDay',
        'peopleIds' => 'getPeopleIds'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timeoffId'] = isset($data['timeoffId']) ? $data['timeoffId'] : null;
        $this->container['timeoffTypeId'] = isset($data['timeoffTypeId']) ? $data['timeoffTypeId'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['hours'] = isset($data['hours']) ? $data['hours'] : null;
        $this->container['timeoffNotes'] = isset($data['timeoffNotes']) ? $data['timeoffNotes'] : null;
        $this->container['modifiedBy'] = isset($data['modifiedBy']) ? $data['modifiedBy'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['repeatState'] = isset($data['repeatState']) ? $data['repeatState'] : null;
        $this->container['repeatEnd'] = isset($data['repeatEnd']) ? $data['repeatEnd'] : null;
        $this->container['fullDay'] = isset($data['fullDay']) ? $data['fullDay'] : null;
        $this->container['peopleIds'] = isset($data['peopleIds']) ? $data['peopleIds'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['timeoffTypeId'] === null) {
            $invalid_properties[] = "'timeoffTypeId' can't be null";
        }
        if ($this->container['startDate'] === null) {
            $invalid_properties[] = "'startDate' can't be null";
        }
        if ($this->container['endDate'] === null) {
            $invalid_properties[] = "'endDate' can't be null";
        }
        if ($this->container['hours'] === null) {
            $invalid_properties[] = "'hours' can't be null";
        }
        if ($this->container['peopleIds'] === null) {
            $invalid_properties[] = "'peopleIds' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['timeoffTypeId'] === null) {
            return false;
        }
        if ($this->container['startDate'] === null) {
            return false;
        }
        if ($this->container['endDate'] === null) {
            return false;
        }
        if ($this->container['hours'] === null) {
            return false;
        }
        if ($this->container['peopleIds'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets timeoffId
     * @return int
     */
    public function getTimeoffId()
    {
        return $this->container['timeoffId'];
    }

    /**
     * Sets timeoffId
     * @param int $timeoffId The ID of this time off. Read-only: not required when creating a time off
     * @return $this
     */
    public function setTimeoffId($timeoffId)
    {
        $this->container['timeoffId'] = $timeoffId;

        return $this;
    }

    /**
     * Gets timeoffTypeId
     * @return int
     */
    public function getTimeoffTypeId()
    {
        return $this->container['timeoffTypeId'];
    }

    /**
     * Sets timeoffTypeId
     * @param int $timeoffTypeId The ID of this time off type
     * @return $this
     */
    public function setTimeoffTypeId($timeoffTypeId)
    {
        $this->container['timeoffTypeId'] = $timeoffTypeId;

        return $this;
    }

    /**
     * Gets startDate
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     * @param string $startDate Start date of this time off
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     * @param string $endDate End date of this time off
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets hours
     * @return float
     */
    public function getHours()
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     * @param float $hours Number of hours per day for this time off. Not required when a full day
     * @return $this
     */
    public function setHours($hours)
    {
        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets timeoffNotes
     * @return string
     */
    public function getTimeoffNotes()
    {
        return $this->container['timeoffNotes'];
    }

    /**
     * Sets timeoffNotes
     * @param string $timeoffNotes Additional notes about the time off
     * @return $this
     */
    public function setTimeoffNotes($timeoffNotes)
    {
        $this->container['timeoffNotes'] = $timeoffNotes;

        return $this;
    }

    /**
     * Gets modifiedBy
     * @return string
     */
    public function getModifiedBy()
    {
        return $this->container['modifiedBy'];
    }

    /**
     * Sets modifiedBy
     * @param string $modifiedBy Account ID of person who last modified this time off (read-only)
     * @return $this
     */
    public function setModifiedBy($modifiedBy)
    {
        $this->container['modifiedBy'] = $modifiedBy;

        return $this;
    }

    /**
     * Gets createdBy
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     * @param string $createdBy Account ID of person who created this time off (read-only)
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets created
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param string $created Date this record was created (read-only)
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     * @return string
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param string $modified Date this record was modified (read-only)
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets repeatState
     * @return string
     */
    public function getRepeatState()
    {
        return $this->container['repeatState'];
    }

    /**
     * Sets repeatState
     * @param string $repeatState Frequency that this time off repeats. 0 = No repeat, 1 = Weekly, 2 = Monthly, 3 = Every 2 Weeks
     * @return $this
     */
    public function setRepeatState($repeatState)
    {
        $this->container['repeatState'] = $repeatState;

        return $this;
    }

    /**
     * Gets repeatEnd
     * @return string
     */
    public function getRepeatEnd()
    {
        return $this->container['repeatEnd'];
    }

    /**
     * Sets repeatEnd
     * @param string $repeatEnd Date that the repeating time off will cease
     * @return $this
     */
    public function setRepeatEnd($repeatEnd)
    {
        $this->container['repeatEnd'] = $repeatEnd;

        return $this;
    }

    /**
     * Gets fullDay
     * @return int
     */
    public function getFullDay()
    {
        return $this->container['fullDay'];
    }

    /**
     * Sets fullDay
     * @param int $fullDay Is this time off for a full day? 1 = Yes, 0 = No
     * @return $this
     */
    public function setFullDay($fullDay)
    {
        $this->container['fullDay'] = $fullDay;

        return $this;
    }

    /**
     * Gets peopleIds
     * @return null[]
     */
    public function getPeopleIds()
    {
        return $this->container['peopleIds'];
    }

    /**
     * Sets peopleIds
     * @param null[] $peopleIds List of people IDs assigned to this time off
     * @return $this
     */
    public function setPeopleIds($peopleIds)
    {
        $this->container['peopleIds'] = $peopleIds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Float\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Float\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


