<?php
/**
 * Project
 *
 * PHP version 5
 *
 * @category Class
 * @package  Float\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Reference
 *
 * This API allows 3rd party integration of your Float data.
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Float\Client\Model;

use \ArrayAccess;

/**
 * Project Class Doc Comment
 *
 * @category    Class
 * @package     Float\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Project implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Project';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'projectId' => 'int',
        'name' => 'string',
        'clientId' => 'int',
        'color' => 'string',
        'notes' => 'string',
        'tags' => 'string[]',
        'nonBillable' => 'int',
        'tentative' => 'int',
        'active' => 'int',
        'projectManager' => 'int',
        'allPmsSchedule' => 'string',
        'created' => 'string',
        'modified' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'projectId' => null,
        'name' => null,
        'clientId' => null,
        'color' => null,
        'notes' => null,
        'tags' => null,
        'nonBillable' => null,
        'tentative' => null,
        'active' => null,
        'projectManager' => null,
        'allPmsSchedule' => null,
        'created' => null,
        'modified' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'projectId' => 'project_id',
        'name' => 'name',
        'clientId' => 'client_id',
        'color' => 'color',
        'notes' => 'notes',
        'tags' => 'tags',
        'nonBillable' => 'non_billable',
        'tentative' => 'tentative',
        'active' => 'active',
        'projectManager' => 'project_manager',
        'allPmsSchedule' => 'all_pms_schedule',
        'created' => 'created',
        'modified' => 'modified'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'projectId' => 'setProjectId',
        'name' => 'setName',
        'clientId' => 'setClientId',
        'color' => 'setColor',
        'notes' => 'setNotes',
        'tags' => 'setTags',
        'nonBillable' => 'setNonBillable',
        'tentative' => 'setTentative',
        'active' => 'setActive',
        'projectManager' => 'setProjectManager',
        'allPmsSchedule' => 'setAllPmsSchedule',
        'created' => 'setCreated',
        'modified' => 'setModified'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'projectId' => 'getProjectId',
        'name' => 'getName',
        'clientId' => 'getClientId',
        'color' => 'getColor',
        'notes' => 'getNotes',
        'tags' => 'getTags',
        'nonBillable' => 'getNonBillable',
        'tentative' => 'getTentative',
        'active' => 'getActive',
        'projectManager' => 'getProjectManager',
        'allPmsSchedule' => 'getAllPmsSchedule',
        'created' => 'getCreated',
        'modified' => 'getModified'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['clientId'] = isset($data['clientId']) ? $data['clientId'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['nonBillable'] = isset($data['nonBillable']) ? $data['nonBillable'] : null;
        $this->container['tentative'] = isset($data['tentative']) ? $data['tentative'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['projectManager'] = isset($data['projectManager']) ? $data['projectManager'] : null;
        $this->container['allPmsSchedule'] = isset($data['allPmsSchedule']) ? $data['allPmsSchedule'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 200)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 200.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 200) {
            return false;
        }
        return true;
    }


    /**
     * Gets projectId
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     * @param int $projectId The ID of this project. Read-only: not required when creating a project
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name of the project
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Project., must be smaller than or equal to 200.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets clientId
     * @return int
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     * @param int $clientId The ID of the project's client
     * @return $this
     */
    public function setClientId($clientId)
    {
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets color
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     * @param string $color Project's color in hexadecimal
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes Notes for this project
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags List of tags
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets nonBillable
     * @return int
     */
    public function getNonBillable()
    {
        return $this->container['nonBillable'];
    }

    /**
     * Sets nonBillable
     * @param int $nonBillable Is this project billable? 0 = Billable, 1 = Non-billable
     * @return $this
     */
    public function setNonBillable($nonBillable)
    {
        $this->container['nonBillable'] = $nonBillable;

        return $this;
    }

    /**
     * Gets tentative
     * @return int
     */
    public function getTentative()
    {
        return $this->container['tentative'];
    }

    /**
     * Sets tentative
     * @param int $tentative Is this project tentative? 1 = Yes, 0 = No
     * @return $this
     */
    public function setTentative($tentative)
    {
        $this->container['tentative'] = $tentative;

        return $this;
    }

    /**
     * Gets active
     * @return int
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param int $active Is this project active or archived? 1 = Active, 0 = Archived
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets projectManager
     * @return int
     */
    public function getProjectManager()
    {
        return $this->container['projectManager'];
    }

    /**
     * Sets projectManager
     * @param int $projectManager Account ID of the assigned project manager
     * @return $this
     */
    public function setProjectManager($projectManager)
    {
        $this->container['projectManager'] = $projectManager;

        return $this;
    }

    /**
     * Gets allPmsSchedule
     * @return string
     */
    public function getAllPmsSchedule()
    {
        return $this->container['allPmsSchedule'];
    }

    /**
     * Sets allPmsSchedule
     * @param string $allPmsSchedule Do all project managers have scheduling rights? 1 = Yes, 0 = No
     * @return $this
     */
    public function setAllPmsSchedule($allPmsSchedule)
    {
        $this->container['allPmsSchedule'] = $allPmsSchedule;

        return $this;
    }

    /**
     * Gets created
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param string $created Date this record was created (read-only)
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     * @return string
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param string $modified Date this record was last modified (read-only)
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Float\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Float\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


