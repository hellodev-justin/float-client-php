<?php
/**
 * TimeoffType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Float\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Reference
 *
 * This API allows 3rd party integration of your Float data.
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Float\Client\Model;

use \ArrayAccess;

/**
 * TimeoffType Class Doc Comment
 *
 * @category    Class
 * @package     Float\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TimeoffType implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TimeoffType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timeoffTypeId' => 'int',
        'timeoffTypeName' => 'string',
        'color' => 'string',
        'createdBy' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'timeoffTypeId' => null,
        'timeoffTypeName' => null,
        'color' => null,
        'createdBy' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'timeoffTypeId' => 'timeoff_type_id',
        'timeoffTypeName' => 'timeoff_type_name',
        'color' => 'color',
        'createdBy' => 'created_by'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'timeoffTypeId' => 'setTimeoffTypeId',
        'timeoffTypeName' => 'setTimeoffTypeName',
        'color' => 'setColor',
        'createdBy' => 'setCreatedBy'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'timeoffTypeId' => 'getTimeoffTypeId',
        'timeoffTypeName' => 'getTimeoffTypeName',
        'color' => 'getColor',
        'createdBy' => 'getCreatedBy'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timeoffTypeId'] = isset($data['timeoffTypeId']) ? $data['timeoffTypeId'] : null;
        $this->container['timeoffTypeName'] = isset($data['timeoffTypeName']) ? $data['timeoffTypeName'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['timeoffTypeName'] === null) {
            $invalid_properties[] = "'timeoffTypeName' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['timeoffTypeName'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets timeoffTypeId
     * @return int
     */
    public function getTimeoffTypeId()
    {
        return $this->container['timeoffTypeId'];
    }

    /**
     * Sets timeoffTypeId
     * @param int $timeoffTypeId The ID of this time off type. Read-only: not required when creating a time off type
     * @return $this
     */
    public function setTimeoffTypeId($timeoffTypeId)
    {
        $this->container['timeoffTypeId'] = $timeoffTypeId;

        return $this;
    }

    /**
     * Gets timeoffTypeName
     * @return string
     */
    public function getTimeoffTypeName()
    {
        return $this->container['timeoffTypeName'];
    }

    /**
     * Sets timeoffTypeName
     * @param string $timeoffTypeName The name of this time off type
     * @return $this
     */
    public function setTimeoffTypeName($timeoffTypeName)
    {
        $this->container['timeoffTypeName'] = $timeoffTypeName;

        return $this;
    }

    /**
     * Gets color
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     * @param string $color Time off type's color in hexadecimal
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets createdBy
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     * @param string $createdBy Account ID of person who created this time off type (read-only)
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Float\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Float\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


