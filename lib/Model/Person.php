<?php
/**
 * Person
 *
 * PHP version 5
 *
 * @category Class
 * @package  Float\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Reference
 *
 * This API allows 3rd party integration of your Float data.
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Float\Client\Model;

use \ArrayAccess;

/**
 * Person Class Doc Comment
 *
 * @category    Class
 * @package     Float\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Person implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Person';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'peopleId' => 'int',
        'name' => 'string',
        'email' => 'string',
        'jobTitle' => 'string',
        'department' => '\Float\Client\Model\Department',
        'notes' => 'string',
        'avatarFile' => 'string',
        'autoEmail' => 'int',
        'employeeType' => 'int',
        'nonWorkDays' => 'int[]',
        'workDayHours' => 'float',
        'active' => 'int',
        'contractor' => 'bool',
        'tags' => '\Float\Client\Model\PeopleTag[]',
        'startDate' => 'string',
        'endDate' => 'string',
        'created' => 'string',
        'modified' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'peopleId' => null,
        'name' => null,
        'email' => null,
        'jobTitle' => null,
        'department' => null,
        'notes' => null,
        'avatarFile' => null,
        'autoEmail' => null,
        'employeeType' => null,
        'nonWorkDays' => null,
        'workDayHours' => 'float',
        'active' => null,
        'contractor' => null,
        'tags' => null,
        'startDate' => null,
        'endDate' => null,
        'created' => null,
        'modified' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'peopleId' => 'people_id',
        'name' => 'name',
        'email' => 'email',
        'jobTitle' => 'job_title',
        'department' => 'department',
        'notes' => 'notes',
        'avatarFile' => 'avatar_file',
        'autoEmail' => 'auto_email',
        'employeeType' => 'employee_type',
        'nonWorkDays' => 'non_work_days',
        'workDayHours' => 'work_day_hours',
        'active' => 'active',
        'contractor' => 'contractor',
        'tags' => 'tags',
        'startDate' => 'start_date',
        'endDate' => 'end_date',
        'created' => 'created',
        'modified' => 'modified'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'peopleId' => 'setPeopleId',
        'name' => 'setName',
        'email' => 'setEmail',
        'jobTitle' => 'setJobTitle',
        'department' => 'setDepartment',
        'notes' => 'setNotes',
        'avatarFile' => 'setAvatarFile',
        'autoEmail' => 'setAutoEmail',
        'employeeType' => 'setEmployeeType',
        'nonWorkDays' => 'setNonWorkDays',
        'workDayHours' => 'setWorkDayHours',
        'active' => 'setActive',
        'contractor' => 'setContractor',
        'tags' => 'setTags',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'created' => 'setCreated',
        'modified' => 'setModified'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'peopleId' => 'getPeopleId',
        'name' => 'getName',
        'email' => 'getEmail',
        'jobTitle' => 'getJobTitle',
        'department' => 'getDepartment',
        'notes' => 'getNotes',
        'avatarFile' => 'getAvatarFile',
        'autoEmail' => 'getAutoEmail',
        'employeeType' => 'getEmployeeType',
        'nonWorkDays' => 'getNonWorkDays',
        'workDayHours' => 'getWorkDayHours',
        'active' => 'getActive',
        'contractor' => 'getContractor',
        'tags' => 'getTags',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'created' => 'getCreated',
        'modified' => 'getModified'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['peopleId'] = isset($data['peopleId']) ? $data['peopleId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['jobTitle'] = isset($data['jobTitle']) ? $data['jobTitle'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['avatarFile'] = isset($data['avatarFile']) ? $data['avatarFile'] : null;
        $this->container['autoEmail'] = isset($data['autoEmail']) ? $data['autoEmail'] : null;
        $this->container['employeeType'] = isset($data['employeeType']) ? $data['employeeType'] : null;
        $this->container['nonWorkDays'] = isset($data['nonWorkDays']) ? $data['nonWorkDays'] : null;
        $this->container['workDayHours'] = isset($data['workDayHours']) ? $data['workDayHours'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['contractor'] = isset($data['contractor']) ? $data['contractor'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['peopleId'] === null) {
            $invalid_properties[] = "'peopleId' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 150)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 150.";
        }

        if (!is_null($this->container['email']) && (strlen($this->container['email']) > 200)) {
            $invalid_properties[] = "invalid value for 'email', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['jobTitle']) && (strlen($this->container['jobTitle']) > 200)) {
            $invalid_properties[] = "invalid value for 'jobTitle', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['notes']) && (strlen($this->container['notes']) > 65535)) {
            $invalid_properties[] = "invalid value for 'notes', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['avatarFile']) && (strlen($this->container['avatarFile']) > 255)) {
            $invalid_properties[] = "invalid value for 'avatarFile', the character length must be smaller than or equal to 255.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['peopleId'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 150) {
            return false;
        }
        if (strlen($this->container['email']) > 200) {
            return false;
        }
        if (strlen($this->container['jobTitle']) > 200) {
            return false;
        }
        if (strlen($this->container['notes']) > 65535) {
            return false;
        }
        if (strlen($this->container['avatarFile']) > 255) {
            return false;
        }
        return true;
    }


    /**
     * Gets peopleId
     * @return int
     */
    public function getPeopleId()
    {
        return $this->container['peopleId'];
    }

    /**
     * Sets peopleId
     * @param int $peopleId The unique identifier for this person. Read-only: not required when creating a person
     * @return $this
     */
    public function setPeopleId($peopleId)
    {
        $this->container['peopleId'] = $peopleId;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The person's full name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 150)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Person., must be smaller than or equal to 150.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Email address for this person
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (strlen($email) > 200)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Person., must be smaller than or equal to 200.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets jobTitle
     * @return string
     */
    public function getJobTitle()
    {
        return $this->container['jobTitle'];
    }

    /**
     * Sets jobTitle
     * @param string $jobTitle The person's job title
     * @return $this
     */
    public function setJobTitle($jobTitle)
    {
        if (!is_null($jobTitle) && (strlen($jobTitle) > 200)) {
            throw new \InvalidArgumentException('invalid length for $jobTitle when calling Person., must be smaller than or equal to 200.');
        }

        $this->container['jobTitle'] = $jobTitle;

        return $this;
    }

    /**
     * Gets department
     * @return \Float\Client\Model\Department
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     * @param \Float\Client\Model\Department $department
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets notes
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string $notes Any notes related to this person
     * @return $this
     */
    public function setNotes($notes)
    {
        if (!is_null($notes) && (strlen($notes) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $notes when calling Person., must be smaller than or equal to 65535.');
        }

        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets avatarFile
     * @return string
     */
    public function getAvatarFile()
    {
        return $this->container['avatarFile'];
    }

    /**
     * Sets avatarFile
     * @param string $avatarFile Filename of thumbnail image for this person (read-only)
     * @return $this
     */
    public function setAvatarFile($avatarFile)
    {
        if (!is_null($avatarFile) && (strlen($avatarFile) > 255)) {
            throw new \InvalidArgumentException('invalid length for $avatarFile when calling Person., must be smaller than or equal to 255.');
        }

        $this->container['avatarFile'] = $avatarFile;

        return $this;
    }

    /**
     * Gets autoEmail
     * @return int
     */
    public function getAutoEmail()
    {
        return $this->container['autoEmail'];
    }

    /**
     * Sets autoEmail
     * @param int $autoEmail Should this person's schedule be emailed at start of week? 1 = Yes, 0 = No
     * @return $this
     */
    public function setAutoEmail($autoEmail)
    {
        $this->container['autoEmail'] = $autoEmail;

        return $this;
    }

    /**
     * Gets employeeType
     * @return int
     */
    public function getEmployeeType()
    {
        return $this->container['employeeType'];
    }

    /**
     * Sets employeeType
     * @param int $employeeType Full-time or part-type. 1 = Full-time, 0  = Part-time
     * @return $this
     */
    public function setEmployeeType($employeeType)
    {
        $this->container['employeeType'] = $employeeType;

        return $this;
    }

    /**
     * Gets nonWorkDays
     * @return int[]
     */
    public function getNonWorkDays()
    {
        return $this->container['nonWorkDays'];
    }

    /**
     * Sets nonWorkDays
     * @param int[] $nonWorkDays Days when a part-time person cannot be scheduled. Array of integers where 0 = Sunday, 1 = Monday, etc. E.g., \"[0,4,6]\" would be Sunday, Thursday and Saturday and this person could be scheduled on Monday, Tuesday, Wednesday or Friday. Valid values
     * @return $this
     */
    public function setNonWorkDays($nonWorkDays)
    {
        $this->container['nonWorkDays'] = $nonWorkDays;

        return $this;
    }

    /**
     * Gets workDayHours
     * @return float
     */
    public function getWorkDayHours()
    {
        return $this->container['workDayHours'];
    }

    /**
     * Sets workDayHours
     * @param float $workDayHours Number of hours that a part-time person is available for scheduling per day
     * @return $this
     */
    public function setWorkDayHours($workDayHours)
    {
        $this->container['workDayHours'] = $workDayHours;

        return $this;
    }

    /**
     * Gets active
     * @return int
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param int $active Is this person active or archived? 1 = Active, 0 = Archived
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets contractor
     * @return bool
     */
    public function getContractor()
    {
        return $this->container['contractor'];
    }

    /**
     * Sets contractor
     * @param bool $contractor Is this person a contractor? 1 = Yes, 0 = No
     * @return $this
     */
    public function setContractor($contractor)
    {
        $this->container['contractor'] = $contractor;

        return $this;
    }

    /**
     * Gets tags
     * @return \Float\Client\Model\PeopleTag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param \Float\Client\Model\PeopleTag[] $tags
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets startDate
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     * @param string $startDate Date the person started
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     * @param string $endDate Date the person finished
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets created
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     * @param string $created Date this record was created (read-only)
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets modified
     * @return string
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     * @param string $modified Date this record was last modified (read-only)
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Float\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Float\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


