<?php
/**
 * MilestonesApi
 * PHP version 5
 *
 * @category Class
 * @package  Float\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Reference
 *
 * This API allows 3rd party integration of your Float data.
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Float\Client\Api;

use \Float\Client\ApiClient;
use \Float\Client\ApiException;
use \Float\Client\Configuration;
use \Float\Client\ObjectSerializer;

/**
 * MilestonesApi Class Doc Comment
 *
 * @category Class
 * @package  Float\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MilestonesApi
{
    /**
     * API Client
     *
     * @var \Float\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Float\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Float\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Float\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Float\Client\ApiClient $apiClient set the API client
     *
     * @return MilestonesApi
     */
    public function setApiClient(\Float\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addMilestone
     *
     * Add a new project milestone
     *
     * @param \Float\Client\Model\Milestone $milestone The milestone to create (optional)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Milestone
     */
    public function addMilestone($milestone = null)
    {
        list($response) = $this->addMilestoneWithHttpInfo($milestone);
        return $response;
    }

    /**
     * Operation addMilestoneWithHttpInfo
     *
     * Add a new project milestone
     *
     * @param \Float\Client\Model\Milestone $milestone The milestone to create (optional)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Milestone, HTTP status code, HTTP response headers (array of strings)
     */
    public function addMilestoneWithHttpInfo($milestone = null)
    {
        // parse inputs
        $resourcePath = "/milestones";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // body params
        $_tempBody = null;
        if (isset($milestone)) {
            $_tempBody = $milestone;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Milestone',
                '/milestones'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Milestone', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Milestone', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteMilestone
     *
     * Delete a milestone
     *
     * @param int $milestoneId milestone id to delete (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return void
     */
    public function deleteMilestone($milestoneId)
    {
        list($response) = $this->deleteMilestoneWithHttpInfo($milestoneId);
        return $response;
    }

    /**
     * Operation deleteMilestoneWithHttpInfo
     *
     * Delete a milestone
     *
     * @param int $milestoneId milestone id to delete (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMilestoneWithHttpInfo($milestoneId)
    {
        // verify the required parameter 'milestoneId' is set
        if ($milestoneId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $milestoneId when calling deleteMilestone');
        }
        // parse inputs
        $resourcePath = "/milestones/{milestone_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($milestoneId !== null) {
            $resourcePath = str_replace(
                "{" . "milestone_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($milestoneId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/milestones/{milestone_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getMilestone
     *
     * Retrieve a single milestone
     *
     * @param int $milestoneId The milestone&#39;s ID (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Milestone
     */
    public function getMilestone($milestoneId)
    {
        list($response) = $this->getMilestoneWithHttpInfo($milestoneId);
        return $response;
    }

    /**
     * Operation getMilestoneWithHttpInfo
     *
     * Retrieve a single milestone
     *
     * @param int $milestoneId The milestone&#39;s ID (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Milestone, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMilestoneWithHttpInfo($milestoneId)
    {
        // verify the required parameter 'milestoneId' is set
        if ($milestoneId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $milestoneId when calling getMilestone');
        }
        // parse inputs
        $resourcePath = "/milestones/{milestone_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($milestoneId !== null) {
            $resourcePath = str_replace(
                "{" . "milestone_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($milestoneId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Milestone',
                '/milestones/{milestone_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Milestone', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Milestone', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMilestones
     *
     * List project milestones
     *
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Milestone[]
     */
    public function getMilestones()
    {
        list($response) = $this->getMilestonesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getMilestonesWithHttpInfo
     *
     * List project milestones
     *
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Milestone[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMilestonesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/milestones";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Milestone[]',
                '/milestones'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Milestone[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Milestone[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateMilestone
     *
     * Update a milestone's details
     *
     * @param int $milestoneId The milestone&#39;s ID (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Milestone
     */
    public function updateMilestone($milestoneId)
    {
        list($response) = $this->updateMilestoneWithHttpInfo($milestoneId);
        return $response;
    }

    /**
     * Operation updateMilestoneWithHttpInfo
     *
     * Update a milestone's details
     *
     * @param int $milestoneId The milestone&#39;s ID (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Milestone, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMilestoneWithHttpInfo($milestoneId)
    {
        // verify the required parameter 'milestoneId' is set
        if ($milestoneId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $milestoneId when calling updateMilestone');
        }
        // parse inputs
        $resourcePath = "/milestones/{milestone_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($milestoneId !== null) {
            $resourcePath = str_replace(
                "{" . "milestone_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($milestoneId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Milestone',
                '/milestones/{milestone_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Milestone', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Milestone', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
