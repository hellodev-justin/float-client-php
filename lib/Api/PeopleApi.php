<?php
/**
 * PeopleApi
 * PHP version 5
 *
 * @category Class
 * @package  Float\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Reference
 *
 * This API allows 3rd party integration of your Float data.
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Float\Client\Api;

use \Float\Client\ApiClient;
use \Float\Client\ApiException;
use \Float\Client\Configuration;
use \Float\Client\ObjectSerializer;

/**
 * PeopleApi Class Doc Comment
 *
 * @category Class
 * @package  Float\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PeopleApi
{
    /**
     * API Client
     *
     * @var \Float\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Float\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Float\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Float\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Float\Client\ApiClient $apiClient set the API client
     *
     * @return PeopleApi
     */
    public function setApiClient(\Float\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addPerson
     *
     * Add a new person
     *
     * @param \Float\Client\Model\Person $body The client to create (optional)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Person
     */
    public function addPerson($body = null)
    {
        list($response) = $this->addPersonWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addPersonWithHttpInfo
     *
     * Add a new person
     *
     * @param \Float\Client\Model\Person $body The client to create (optional)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Person, HTTP status code, HTTP response headers (array of strings)
     */
    public function addPersonWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/people";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Person',
                '/people'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Person', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Person', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePerson
     *
     * Delete a person
     *
     * @param int $peopleId people id to delete (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return void
     */
    public function deletePerson($peopleId)
    {
        list($response) = $this->deletePersonWithHttpInfo($peopleId);
        return $response;
    }

    /**
     * Operation deletePersonWithHttpInfo
     *
     * Delete a person
     *
     * @param int $peopleId people id to delete (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePersonWithHttpInfo($peopleId)
    {
        // verify the required parameter 'peopleId' is set
        if ($peopleId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $peopleId when calling deletePerson');
        }
        // parse inputs
        $resourcePath = "/people/{people_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($peopleId !== null) {
            $resourcePath = str_replace(
                "{" . "people_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($peopleId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/people/{people_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getPeople
     *
     * List people
     *
     * @param int $page The page number of the page of results to return (optional)
     * @param int $perPage The number of items per page (optional)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Person[]
     */
    public function getPeople($page = null, $perPage = null)
    {
        list($response) = $this->getPeopleWithHttpInfo($page, $perPage);
        return $response;
    }

    /**
     * Operation getPeopleWithHttpInfo
     *
     * List people
     *
     * @param int $page The page number of the page of results to return (optional)
     * @param int $perPage The number of items per page (optional)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Person[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPeopleWithHttpInfo($page = null, $perPage = null)
    {
        // parse inputs
        $resourcePath = "/people";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per-page'] = $this->apiClient->getSerializer()->toQueryValue($perPage);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Person[]',
                '/people'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Person[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Person[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPerson
     *
     * Retrieve a single person
     *
     * @param int $peopleId The person&#39;s id (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Person
     */
    public function getPerson($peopleId)
    {
        list($response) = $this->getPersonWithHttpInfo($peopleId);
        return $response;
    }

    /**
     * Operation getPersonWithHttpInfo
     *
     * Retrieve a single person
     *
     * @param int $peopleId The person&#39;s id (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Person, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonWithHttpInfo($peopleId)
    {
        // verify the required parameter 'peopleId' is set
        if ($peopleId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $peopleId when calling getPerson');
        }
        // parse inputs
        $resourcePath = "/people/{people_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($peopleId !== null) {
            $resourcePath = str_replace(
                "{" . "people_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($peopleId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Person',
                '/people/{people_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Person', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Person', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePerson
     *
     * Update a person's details
     *
     * @param int $peopleId The person&#39;s id (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Person
     */
    public function updatePerson($peopleId)
    {
        list($response) = $this->updatePersonWithHttpInfo($peopleId);
        return $response;
    }

    /**
     * Operation updatePersonWithHttpInfo
     *
     * Update a person's details
     *
     * @param int $peopleId The person&#39;s id (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Person, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePersonWithHttpInfo($peopleId)
    {
        // verify the required parameter 'peopleId' is set
        if ($peopleId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $peopleId when calling updatePerson');
        }
        // parse inputs
        $resourcePath = "/people/{people_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($peopleId !== null) {
            $resourcePath = str_replace(
                "{" . "people_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($peopleId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Person',
                '/people/{people_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Person', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Person', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
