<?php
/**
 * TimeOffTypesApi
 * PHP version 5
 *
 * @category Class
 * @package  Float\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Reference
 *
 * This API allows 3rd party integration of your Float data.
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Float\Client\Api;

use \Float\Client\ApiClient;
use \Float\Client\ApiException;
use \Float\Client\Configuration;
use \Float\Client\ObjectSerializer;

/**
 * TimeOffTypesApi Class Doc Comment
 *
 * @category Class
 * @package  Float\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimeOffTypesApi
{
    /**
     * API Client
     *
     * @var \Float\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Float\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Float\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Float\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Float\Client\ApiClient $apiClient set the API client
     *
     * @return TimeOffTypesApi
     */
    public function setApiClient(\Float\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addTimeoffType
     *
     * Add a new time off type
     *
     * @param \Float\Client\Model\TimeoffType $timeoff The time off type to create (optional)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\TimeoffType
     */
    public function addTimeoffType($timeoff = null)
    {
        list($response) = $this->addTimeoffTypeWithHttpInfo($timeoff);
        return $response;
    }

    /**
     * Operation addTimeoffTypeWithHttpInfo
     *
     * Add a new time off type
     *
     * @param \Float\Client\Model\TimeoffType $timeoff The time off type to create (optional)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\TimeoffType, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTimeoffTypeWithHttpInfo($timeoff = null)
    {
        // parse inputs
        $resourcePath = "/timeoff-types";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // body params
        $_tempBody = null;
        if (isset($timeoff)) {
            $_tempBody = $timeoff;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\TimeoffType',
                '/timeoff-types'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\TimeoffType', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\TimeoffType', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTimeoffType
     *
     * Retrieve a single time off type
     *
     * @param int $timeoffTypeId The time off type&#39;s ID (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\TimeoffType
     */
    public function getTimeoffType($timeoffTypeId)
    {
        list($response) = $this->getTimeoffTypeWithHttpInfo($timeoffTypeId);
        return $response;
    }

    /**
     * Operation getTimeoffTypeWithHttpInfo
     *
     * Retrieve a single time off type
     *
     * @param int $timeoffTypeId The time off type&#39;s ID (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\TimeoffType, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTimeoffTypeWithHttpInfo($timeoffTypeId)
    {
        // verify the required parameter 'timeoffTypeId' is set
        if ($timeoffTypeId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $timeoffTypeId when calling getTimeoffType');
        }
        // parse inputs
        $resourcePath = "/timeoff-types/{timeoff_type_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($timeoffTypeId !== null) {
            $resourcePath = str_replace(
                "{" . "timeoff_type_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($timeoffTypeId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\TimeoffType',
                '/timeoff-types/{timeoff_type_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\TimeoffType', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\TimeoffType', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTimeoffTypes
     *
     * List of time off types
     *
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\TimeoffType[]
     */
    public function getTimeoffTypes()
    {
        list($response) = $this->getTimeoffTypesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getTimeoffTypesWithHttpInfo
     *
     * List of time off types
     *
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\TimeoffType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTimeoffTypesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/timeoff-types";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\TimeoffType[]',
                '/timeoff-types'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\TimeoffType[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\TimeoffType[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTimeoffType
     *
     * Update a time off type's details
     *
     * @param int $timeoffTypeId The time off type&#39;s ID (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\TimeoffType
     */
    public function updateTimeoffType($timeoffTypeId)
    {
        list($response) = $this->updateTimeoffTypeWithHttpInfo($timeoffTypeId);
        return $response;
    }

    /**
     * Operation updateTimeoffTypeWithHttpInfo
     *
     * Update a time off type's details
     *
     * @param int $timeoffTypeId The time off type&#39;s ID (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\TimeoffType, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTimeoffTypeWithHttpInfo($timeoffTypeId)
    {
        // verify the required parameter 'timeoffTypeId' is set
        if ($timeoffTypeId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $timeoffTypeId when calling updateTimeoffType');
        }
        // parse inputs
        $resourcePath = "/timeoff-types/{timeoff_type_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($timeoffTypeId !== null) {
            $resourcePath = str_replace(
                "{" . "timeoff_type_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($timeoffTypeId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\TimeoffType',
                '/timeoff-types/{timeoff_type_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\TimeoffType', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\TimeoffType', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
