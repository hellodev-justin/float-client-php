<?php
/**
 * TasksApi
 * PHP version 5
 *
 * @category Class
 * @package  Float\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Reference
 *
 * This API allows 3rd party integration of your Float data.
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Float\Client\Api;

use \Float\Client\ApiClient;
use \Float\Client\ApiException;
use \Float\Client\Configuration;
use \Float\Client\ObjectSerializer;

/**
 * TasksApi Class Doc Comment
 *
 * @category Class
 * @package  Float\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TasksApi
{
    /**
     * API Client
     *
     * @var \Float\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Float\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Float\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Float\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Float\Client\ApiClient $apiClient set the API client
     *
     * @return TasksApi
     */
    public function setApiClient(\Float\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addTask
     *
     * Add a new task
     *
     * @param \Float\Client\Model\Task $task The task to create. (optional)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Task
     */
    public function addTask($task = null)
    {
        list($response) = $this->addTaskWithHttpInfo($task);
        return $response;
    }

    /**
     * Operation addTaskWithHttpInfo
     *
     * Add a new task
     *
     * @param \Float\Client\Model\Task $task The task to create. (optional)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Task, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTaskWithHttpInfo($task = null)
    {
        // parse inputs
        $resourcePath = "/tasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // body params
        $_tempBody = null;
        if (isset($task)) {
            $_tempBody = $task;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Task',
                '/tasks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Task', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Task', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTask
     *
     * Delete a task
     *
     * @param int $taskId task id to delete (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return void
     */
    public function deleteTask($taskId)
    {
        list($response) = $this->deleteTaskWithHttpInfo($taskId);
        return $response;
    }

    /**
     * Operation deleteTaskWithHttpInfo
     *
     * Delete a task
     *
     * @param int $taskId task id to delete (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTaskWithHttpInfo($taskId)
    {
        // verify the required parameter 'taskId' is set
        if ($taskId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $taskId when calling deleteTask');
        }
        // parse inputs
        $resourcePath = "/tasks/{task_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($taskId !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($taskId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/tasks/{task_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getTask
     *
     * Retrieve a single task
     *
     * @param int $taskId The task&#39;s ID (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Task
     */
    public function getTask($taskId)
    {
        list($response) = $this->getTaskWithHttpInfo($taskId);
        return $response;
    }

    /**
     * Operation getTaskWithHttpInfo
     *
     * Retrieve a single task
     *
     * @param int $taskId The task&#39;s ID (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Task, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTaskWithHttpInfo($taskId)
    {
        // verify the required parameter 'taskId' is set
        if ($taskId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $taskId when calling getTask');
        }
        // parse inputs
        $resourcePath = "/tasks/{task_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($taskId !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($taskId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Task',
                '/tasks/{task_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Task', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Task', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTasks
     *
     * List tasks. This includes any tasks or repeating task sets that start or end within the date range specified.
     *
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Task[]
     */
    public function getTasks()
    {
        list($response) = $this->getTasksWithHttpInfo();
        return $response;
    }

    /**
     * Operation getTasksWithHttpInfo
     *
     * List tasks. This includes any tasks or repeating task sets that start or end within the date range specified.
     *
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Task[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTasksWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/tasks";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Task[]',
                '/tasks'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Task[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Task[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateTask
     *
     * Update a task's details
     *
     * @param int $taskId The task&#39;s ID (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Task
     */
    public function updateTask($taskId)
    {
        list($response) = $this->updateTaskWithHttpInfo($taskId);
        return $response;
    }

    /**
     * Operation updateTaskWithHttpInfo
     *
     * Update a task's details
     *
     * @param int $taskId The task&#39;s ID (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Task, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTaskWithHttpInfo($taskId)
    {
        // verify the required parameter 'taskId' is set
        if ($taskId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $taskId when calling updateTask');
        }
        // parse inputs
        $resourcePath = "/tasks/{task_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($taskId !== null) {
            $resourcePath = str_replace(
                "{" . "task_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($taskId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Task',
                '/tasks/{task_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Task', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Task', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
