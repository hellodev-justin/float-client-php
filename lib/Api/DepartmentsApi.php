<?php
/**
 * DepartmentsApi
 * PHP version 5
 *
 * @category Class
 * @package  Float\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Reference
 *
 * This API allows 3rd party integration of your Float data.
 *
 * OpenAPI spec version: 3.0.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Float\Client\Api;

use \Float\Client\ApiClient;
use \Float\Client\ApiException;
use \Float\Client\Configuration;
use \Float\Client\ObjectSerializer;

/**
 * DepartmentsApi Class Doc Comment
 *
 * @category Class
 * @package  Float\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DepartmentsApi
{
    /**
     * API Client
     *
     * @var \Float\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Float\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Float\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Float\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Float\Client\ApiClient $apiClient set the API client
     *
     * @return DepartmentsApi
     */
    public function setApiClient(\Float\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addDepartment
     *
     * Add a new department
     *
     * @param \Float\Client\Model\Department $department The department to create. (optional)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Department
     */
    public function addDepartment($department = null)
    {
        list($response) = $this->addDepartmentWithHttpInfo($department);
        return $response;
    }

    /**
     * Operation addDepartmentWithHttpInfo
     *
     * Add a new department
     *
     * @param \Float\Client\Model\Department $department The department to create. (optional)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Department, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDepartmentWithHttpInfo($department = null)
    {
        // parse inputs
        $resourcePath = "/departments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // body params
        $_tempBody = null;
        if (isset($department)) {
            $_tempBody = $department;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Department',
                '/departments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Department', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Department', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteDepartment
     *
     * Delete a department
     *
     * @param int $departmentId department id to delete (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return void
     */
    public function deleteDepartment($departmentId)
    {
        list($response) = $this->deleteDepartmentWithHttpInfo($departmentId);
        return $response;
    }

    /**
     * Operation deleteDepartmentWithHttpInfo
     *
     * Delete a department
     *
     * @param int $departmentId department id to delete (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDepartmentWithHttpInfo($departmentId)
    {
        // verify the required parameter 'departmentId' is set
        if ($departmentId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $departmentId when calling deleteDepartment');
        }
        // parse inputs
        $resourcePath = "/departments/{department_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($departmentId !== null) {
            $resourcePath = str_replace(
                "{" . "department_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($departmentId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/departments/{department_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getDepartment
     *
     * Retrieve a single department
     *
     * @param int $departmentId The department&#39;s id (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Department
     */
    public function getDepartment($departmentId)
    {
        list($response) = $this->getDepartmentWithHttpInfo($departmentId);
        return $response;
    }

    /**
     * Operation getDepartmentWithHttpInfo
     *
     * Retrieve a single department
     *
     * @param int $departmentId The department&#39;s id (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Department, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDepartmentWithHttpInfo($departmentId)
    {
        // verify the required parameter 'departmentId' is set
        if ($departmentId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $departmentId when calling getDepartment');
        }
        // parse inputs
        $resourcePath = "/departments/{department_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($departmentId !== null) {
            $resourcePath = str_replace(
                "{" . "department_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($departmentId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Department',
                '/departments/{department_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Department', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Department', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDepartments
     *
     * List departments
     *
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Department[]
     */
    public function getDepartments()
    {
        list($response) = $this->getDepartmentsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getDepartmentsWithHttpInfo
     *
     * List departments
     *
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Department[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getDepartmentsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/departments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Department[]',
                '/departments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Department[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Department[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateDepartment
     *
     * Update a department's details
     *
     * @param int $departmentId The department&#39;s id (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return \Float\Client\Model\Department
     */
    public function updateDepartment($departmentId)
    {
        list($response) = $this->updateDepartmentWithHttpInfo($departmentId);
        return $response;
    }

    /**
     * Operation updateDepartmentWithHttpInfo
     *
     * Update a department's details
     *
     * @param int $departmentId The department&#39;s id (required)
     * @throws \Float\Client\ApiException on non-2xx response
     * @return array of \Float\Client\Model\Department, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDepartmentWithHttpInfo($departmentId)
    {
        // verify the required parameter 'departmentId' is set
        if ($departmentId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $departmentId when calling updateDepartment');
        }
        // parse inputs
        $resourcePath = "/departments/{department_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($departmentId !== null) {
            $resourcePath = str_replace(
                "{" . "department_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($departmentId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Float\Client\Model\Department',
                '/departments/{department_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Float\Client\Model\Department', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Float\Client\Model\Department', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
